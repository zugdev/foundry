(function() {
    var type_impls = Object.fromEntries([["foundry_cli",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GlobalAlloc-for-ProfiledAllocator%3CT%3E\" class=\"impl\"><a href=\"#impl-GlobalAlloc-for-ProfiledAllocator%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html\" title=\"trait core::alloc::global::GlobalAlloc\">GlobalAlloc</a> for ProfiledAllocator&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html\" title=\"trait core::alloc::global::GlobalAlloc\">GlobalAlloc</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc\" class=\"method trait-impl\"><a href=\"#method.alloc\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.alloc\" class=\"fn\">alloc</a>(&amp;self, layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Allocates memory as described by the given <code>layout</code>. <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.alloc\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dealloc\" class=\"method trait-impl\"><a href=\"#method.dealloc\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\" class=\"fn\">dealloc</a>(&amp;self, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>)</h4></section></summary><div class='docblock'>Deallocates the block of memory at the given <code>ptr</code> pointer with the given <code>layout</code>. <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#tymethod.dealloc\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alloc_zeroed\" class=\"method trait-impl\"><a href=\"#method.alloc_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#method.alloc_zeroed\" class=\"fn\">alloc_zeroed</a>(&amp;self, layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Behaves like <code>alloc</code>, but also ensures that the contents\nare set to zero before being returned. <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#method.alloc_zeroed\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.realloc\" class=\"method trait-impl\"><a href=\"#method.realloc\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#method.realloc\" class=\"fn\">realloc</a>(\n    &amp;self,\n    ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>,\n    layout: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/alloc/layout/struct.Layout.html\" title=\"struct core::alloc::layout::Layout\">Layout</a>,\n    new_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Shrinks or grows a block of memory to the given <code>new_size</code> in bytes.\nThe block is described by the given <code>ptr</code> pointer and <code>layout</code>. <a href=\"https://doc.rust-lang.org/nightly/core/alloc/global/trait.GlobalAlloc.html#method.realloc\">Read more</a></div></details></div></details>","GlobalAlloc","foundry_cli::utils::allocator::AllocatorWrapper","foundry_cli::utils::allocator::Allocator"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ProfiledAllocator%3CT%3E\" class=\"impl\"><a href=\"#impl-ProfiledAllocator%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; ProfiledAllocator&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">new</a>(\n    inner_allocator: T,\n    callstack_depth: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>,\n) -&gt; ProfiledAllocator&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new <code>ProfiledAllocator</code>.</p>\n<p>Specifying a non-zero <code>callstack_depth</code> will enable collection of callstack for this\nmessage. The number provided will limit the number of call frames collected. Note that\nenabling callstack collection introduces a non-trivial amount of overhead to each\nallocation and deallocation.</p>\n</div></details></div></details>",0,"foundry_cli::utils::allocator::AllocatorWrapper","foundry_cli::utils::allocator::Allocator"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[6389]}