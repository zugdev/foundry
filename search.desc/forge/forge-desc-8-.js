searchState.loadedDescShard("forge", 8, "Returns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nIf set to <code>true</code>, consumes the next call from <code>last_sequence</code>, …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nRunner that will generate the call from the strategy.\nAll <code>self.next()</code> calls will now pop <code>self.last_sequence</code>. …\nThe contract’s storage layout, if available.\nStrategy to be used to generate calls from <code>target_reference</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReference to which contract we want a fuzzed calldata from.\nList of <code>contract_path:contract_name</code> along with selectors, …\nThe targeted functions of the contract.\nContracts identified as targets during a fuzz run.\nAddress of the test contract.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nFlag to know if a call has been overridden. Don’t allow …\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nDetermines contract storage layout from project contracts. …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nA set of arbitrary 32 byte data from the VM used to …\nValue tree for signed ints (up to int256). The strategy …\nValue tree for unsigned ints (up to uint256). The strategy …\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollects state changes from a StateChangeset and logs into …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nAddresses of external libraries deployed in test setup, …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a function, it returns a strategy which generates …\nGiven a function and some state, it returns a strategy …\nGiven a function, it returns a proptest strategy which …\nGiven a parameter type, returns a strategy for generating …\nGiven a parameter type, returns a strategy for generating …\nGiven a parameter type and configured fixtures for param …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates the invariant strategy.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nLogs stats about the current state.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nMutates the current value of the given parameter type and …\nCreate a new strategy. #Arguments\nCreate a new strategy. #Arguments\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nGiven a target address, we generate random calldata.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nRemoves all newly added entries from the dictionary.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nRepresents the gas report for a set of contracts.\nAnalyzes the given traces and generates a gas report.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nAll contracts that were analyzed grouped by their …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nFinalizes the gas report by calculating the min, max, …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction name -&gt; Function signature -&gt; GasInfo\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nContracts to ignore when generating the report.\nWhether to include gas reports for tests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nWhether to report any contracts.\nContracts to generate the report for.\nWhat kind of report to generate.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nWhether the given contract should be reported.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nAn Inspector that collects touched accounts and storage …\nRecord full, push stack\nAn EVM inspector that handles calls to various cheatcodes, …\nAdditional, configurable context the <code>Cheatcodes</code> inspector …\nAn inspector for Chisel\nCustom print Inspector, it has step level information of …\nRecord the full stack\nAn inspector that can fuzz and collect data for that …\nThe collected results of <code>InspectorStack</code>.\nAn inspector that calls multiple inspectors in sequence.\nInspector implementation for collecting coverage …\nAn inspector that collects logs during execution.\nDon’t record stack snapshots\nRecord only the items pushed to the stack\nAn inspector that tracks call context to enhances revert …\nAn inspector that enforces certain rules during script …\nHow much of the stack to record. Nothing, just the items …\nAn inspector that collects call traces.\nGives guidance to the TracingInspector.\nReturns list of addresses and storage keys used by the …\nCurrent EIP-2930 access lists.\nRecorded storage reads and writes\nThe active EIP-4844 blob that will be attached to the next …\nCurrently active EIP-7702 delegations that will be …\nAdds a delegation to the active delegations list.\nReturns a config with everything enabled.\nMap of context depths to memory offset ranges that may be …\nPaths (directories) where file reading/writing is allowed\nUse the create 2 factory in all cases including tests and …\nReturns existing or set a default <code>ArbitraryStorage</code> option. …\nAddresses with arbitrary storage.\nReturns an <code>InspectorExt</code> using this stack’s inspectors.\nWhether to enable legacy (non-reverting) assertions.\nAssume next call can revert and discard fuzz run if it …\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nArtifacts which are guaranteed to be fresh (either …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nPath to the directory that contains the bindings generated …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nSet the block environment.\nThe block environment\nThe block environment.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nBreakpoints supplied by the <code>breakpoint</code> cheatcode. …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nAbsolute Path to broadcast dir i.e project_root/broadcast\nCurrent broadcasting information\nScripting based transactions\nBuilds the stack of inspectors to use when …\nTracks the first call with non-zero calldata that targets …\nGiven a strategy, it generates a random call.\nMapping of chain IDs to their aliases\nMapping of chain aliases to chain data\nEnable cheatcodes with the given config.\nThe cheatcodes config.\nSet the Chisel inspector.\nThe chisel state inspector.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns a new <code>CheatsConfig</code> configured with the given <code>Config</code>…\nCollects all the data gathered during inspection into a …\nIf set, it collects <code>stack</code> and <code>memory</code> values for fuzzing …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nSet whether to enable the edge coverage collector.\nSet whether to enable the line coverage collector.\nSet whether to enable the log collector.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns the config of the inspector.\nAdditional, user configurable context this Inspector has …\nReturns a mutable reference to the config of the inspector.\nThe CREATE2 deployer address.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns a config for geth style traces.\nReturns a config for parity style traces.\nDeprecated cheatcodes mapped to the reason. Used to report …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nDisable recording of individual memory snapshots\nDisable recording of individual logs\nDisable recording of individual stack snapshots\nDisable recording of state diffs\nDisable recording of individual opcode level steps\nSet whether to enable the call isolation. For description …\nSet whether to enable call isolation.\nWhether to enable call isolation. In isolation mode all …\nSame as <code>Self::is_foundry_toml</code> but returns an <code>Err</code> if …\nReturns an error if no access is granted to access <code>path</code>, …\nAll recorded ETH <code>deal</code>s.\nHow the evm was configured by the user\nWhether to ignore precompile calls.\nReturns the excluded addresses.\nExpected calls\nExpected creates\nExpected emits\nExpected revert information\nWhether the FFI cheatcode is enabled.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nThe PC of the final instruction\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nAdditional diagnostic for reverts\nFork configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a config for geth’s FlatCallTracer.\nReturns a config for geth’s CallTracer.\nReturns a config for geth style traces based on the given …\nReturns a config for geth’s Erc7562Frame.\nReturns a config for geth’s PrestateTracer.\nReturns the TracingInspectorConfig depending on the …\nWhether to commit FS changes such as file creations, …\nFilesystem permissions for cheatcodes like <code>writeFile</code>, …\nResets the inspector to its initial state of Self::new. …\nResets the inspector to it’s initial state of Self::new.\nIf <code>collect</code> is set, we store the collected values in this …\nSet the fuzzer inspector.\nThe fuzzer inspector and its state, if it exists.\nGas metering state.\nSet the gas price.\nThe gas price.\nThe gas price.\nContains gas snapshots made over the course of a test …\nGet chain data by alias\nReturns the configured prank at given depth or the first …\nGet RPC URL for an alias\nReturns the  GethTraceBuilder for the recorded traces …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nWhether the given address has arbitrary storage.\nIgnored traces.\nInitialize default chain data (similar to …\nWhether the next contract creation should be intercepted …\nWhether to allow <code>expectRevert</code> to work for internal calls.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns list of addresses and storage keys used by the …\nConsumes the Inspector and returns a GethTraceBuilder.\nConsumes the Inspector and returns a ParityTraceBuilder.\nConsumes the inspector and returns the map of addresses …\nConsumes the inspector and returns the recorded call …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns true if this is the StackSnapshotType::All variant\nWhether the given address is a copy of an address with …\nWhether the step opcode is EXTCODESIZE or not.\nReturns true if the given <code>path</code> is the project’s …\nReturns true if this is the StackSnapshotType::Full variant\nReturns true if the given path is allowed, if any path …\nReturns true if this is the StackSnapshotType::Pushes …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nAddress labels from config\nAddress labels\nSet whether to collect line coverage information.\nWhether line coverage info should be collected.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nLogs the status of the inspectors.\nSet whether to collect logs.\nThe collected logs. Includes both <code>LOG</code> opcodes and …\nWhether logs should be collected.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nMapping slots.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nEnable recording of individual memory snapshots\nMerge another config into this one.\nMocked calls\nMocked functions. Maps target address to be mocked to pair …\nCreates a new inspector instance\nExtracts the necessary settings from the Config\nCreates a new <code>Cheatcodes</code> with the given settings.\nCreate a new Chisel state inspector.\nCreate a new inspector stack builder.\nCreates a new inspector stack.\nReturns a new instance for the given config\nDisables storage caching entirely.\nTracks calls with calldata that target an address without …\nTracks EXTCODESIZE checks that target an address without …\nReturns a config with everything disabled.\nAttempts to canonicalize (see std::fs::canonicalize) the …\nSet whether to enable Odyssey features. For description of …\nSet whether to enable call isolation.\nWhether to enable Odyssey features.\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nCalled when there was a revert.\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns the <code>TracingInspectorConfig</code> for <code>TraceType::StateDiff</code>…\nReturns the <code>TracingInspectorConfig</code> for <code>TraceType::VmTrace</code>.\nProject’s paths as configured\nThe current program counter.\nPrank information, mapped to the call depth where pranks …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nSet whether to enable the trace printer.\nSet whether to enable the trace printer.\nWhether to print all opcode traces into the console. …\nSets a timeout for vm.prompt cheatcodes\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nThe information of the debug step recording.\nEnable recording of immediate bytes\nWhether to record immediate bytes for opcodes.\nEnable recording of individual logs\nWhether to record logs\nWhether to record individual memory snapshots.\nOptional filter for opcodes to record. If provided, only …\nWhether to record returndata buffer snapshots.\nWhether to record individual stack snapshots.\nWhether to record state diffs.\nWhether to record every individual opcode level step.\nRecorded account accesses (calls, creates) organized by …\nRecorded logs\nWhether storage access recording is currently active\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nProject root\nReturns the RPC to use\nAll known endpoints and their aliases\nRPC storage caching settings determines what chains and …\nReturns all the RPC urls and their alias.\nCurrently running artifact.\nSet whether to enable script execution inspector.\nThe address of the script contract being executed.\nOptional seed for the RNG algorithm.\nSerialized JSON values.\nSets the block for the relevant inspectors.\nSet chain data for a specific alias\nSet chain with default RPC URL (similar to …\nSet the cheatcodes inspector.\nSet the Chisel inspector.\nSet the CREATE2 deployer address.\nSet variables from an environment for the relevant …\nConfigure whether calls to precompiles should be ignored.\nSet the fuzzer inspector.\nSets the gas price for the relevant inspectors.\nConfigure whether the tracer should record immediate bytes\nConfigure whether the tracer should record memory snapshots\nConfigure whether the tracer should record logs\nConfigure how the tracer should record stack snapshots\nConfigure whether the tracer should record state diffs\nConfigure whether individual opcode level steps should be …\nConfigure whether the tracer should record steps and state …\nManually set the gas limit of the debug root trace.\nManually set the gas used of the root trace.\nSets the unlocked wallets.\nWhether the given slot of address with arbitrary storage …\nIf OpcodeFilter is configured, returns whether the given …\nSignatures identifier for decoding events and functions\nEnable recording of individual stack snapshots\nThe final state of the REPL contract call\nHandles <code>REVERT</code> and <code>EXTCODESIZE</code> opcodes for diagnostics.\nEnable recording of individual opcode level steps\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].")